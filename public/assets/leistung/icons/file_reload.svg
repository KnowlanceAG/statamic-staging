<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 100 100" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><g xmlns="http://www.w3.org/2000/svg"><path d="m46.116 91.333h-22.5c-1.79 0-3.246-1.456-3.246-3.246v-15.295c0-.552.447-1 1-1s1 .448 1 1v15.296c0 .687.559 1.246 1.246 1.246h22.5c.553 0 1 .448 1 1s-.447.999-1 .999z" fill="#ff6606" data-original="#000000"/></g><g xmlns="http://www.w3.org/2000/svg"><path d="m49.251 91.333h-.187c-.553 0-1-.448-1-1s.447-1 1-1h.187c.553 0 1 .448 1 1s-.447 1-1 1z" fill="#ff6606" data-original="#000000"/></g><g xmlns="http://www.w3.org/2000/svg"><path d="m76.384 91.333h-23.764c-.553 0-1-.448-1-1s.447-1 1-1h23.764c.688 0 1.246-.559 1.246-1.246v-67.798l-15.052-11.289h-38.962c-.688 0-1.246.559-1.246 1.246v59.318c0 .552-.447 1-1 1s-1-.448-1-1v-59.318c0-1.79 1.456-3.246 3.246-3.246h39.295c.217 0 .427.07.6.2l15.719 11.789c.252.188.4.485.4.8v68.299c0 1.789-1.456 3.245-3.246 3.245z" fill="#ff6606" data-original="#000000"/></g><g xmlns="http://www.w3.org/2000/svg"><path d="m72.891 21.913h-7.733c-1.79 0-3.246-1.456-3.246-3.246v-6.175c0-.552.447-1 1-1s1 .448 1 1v6.175c0 .687.559 1.246 1.246 1.246h7.733c.553 0 1 .448 1 1s-.448 1-1 1z" fill="#ff6606" data-original="#000000"/></g><g xmlns="http://www.w3.org/2000/svg"><path d="m75.453 21.913h-.187c-.553 0-1-.448-1-1s.447-1 1-1h.187c.553 0 1 .448 1 1s-.447 1-1 1z" fill="#ff6606" data-original="#000000"/></g><g xmlns="http://www.w3.org/2000/svg"><path d="m50.939 63.567c-7.288 0-13.217-6.086-13.217-13.567s5.929-13.567 13.217-13.567c3.733 0 7.311 1.633 9.814 4.48.364.415.324 1.046-.091 1.411-.413.364-1.046.326-1.411-.091-2.124-2.416-5.154-3.801-8.313-3.801-6.185 0-11.217 5.189-11.217 11.567s5.032 11.567 11.217 11.567c3.869 0 7.415-2.016 9.486-5.393.288-.472.904-.618 1.375-.33.471.289.619.905.33 1.375-2.436 3.976-6.619 6.349-11.19 6.349z" fill="#ff6606" data-original="#000000"/></g><g xmlns="http://www.w3.org/2000/svg"><path d="m60.508 43.178h-5.757c-.553 0-1-.448-1-1s.447-1 1-1h4.757v-5.115c0-.552.447-1 1-1s1 .448 1 1v6.115c0 .552-.447 1-1 1z" fill="#ff6606" data-original="#000000"/></g></g></svg>
